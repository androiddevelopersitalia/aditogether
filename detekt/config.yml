build:
  maxIssues: 0
  excludeCorrectable: false
  weights:
  # complexity: 2
  # LongParameterList: 1
  # style: 1
  # comments: 1

config:
  excludes: ''
  validation: true
  warningsAsErrors: true

processors:
  active: true
  exclude:
    - 'DetektProgressListener'
  # - 'FunctionCountProcessor'
  # - 'PropertyCountProcessor'
  # - 'ClassCountProcessor'
  # - 'PackageCountProcessor'
  # - 'KtFileCountProcessor'

console-reports:
  active: true
  exclude:
    - 'ProjectStatisticsReport'
    - 'ComplexityReport'
    - 'NotificationReport'
    #  - 'FindingsReport'
    - 'FileBasedFindingsReport'

# output-reports:
#   active: true
#   exclude:
#   # - 'TxtOutputReport'
#   # - 'XmlOutputReport'
#   # - 'HtmlOutputReport'

comments:
  active: true
  AbsentOrWrongFileLicense:
    active: false
    # licenseTemplateFile: 'license.template'
  # do not report private function with comments
  CommentOverPrivateFunction:
    active: false
  # do not report private property with comments
  CommentOverPrivateProperty:
    active: false
  DeprecatedBlockTag:
    active: true
  # do not report comments with wrong end of sentence
  EndOfSentenceFormat:
    active: false
    # endOfSentenceFormat: '([.?!][ \t\n\r\f<])|([.?!:]$)'
  # report public class without comments, nested / inner members are excluded, but we suppose the
  # outer documentation to be exhaustive enough
  UndocumentedPublicClass:
    active: false
    searchInNestedClass: true
    searchInInnerClass: true
    searchInInnerObject: true
    searchInInnerInterface: true
  # do not report public x, but we expect the name to exhaustive, otherwise documentation is needed
  UndocumentedPublicFunction:
    active: false
  # do not report public x, but we expect the name to exhaustive, otherwise documentation is needed
  UndocumentedPublicProperty:
    active: false

complexity:
  active: true
  # report condition with to many statements ( like an `if` condition )
  ComplexCondition:
    active: true
    threshold: 4
  # report interface with too many members
  ComplexInterface:
    active: false
    threshold: 21
    includeStaticDeclarations: false
    includePrivateDeclarations: false
  # report complex method using McCabe's Cyclomatic Complexity (MCC) metric
  # * __Conditional statements__ - `if`, `else if`, `when`
  # * __Jump statements__ - `continue`, `break`
  # * __Loops__ - `for`, `while`, `do-while`, `forEach`
  # * __Operators__ `&&`, `||`, `?:` * - __Exceptions__ - `catch`, `use`
  # * __Scope Functions__ - `let`, `run`, `with`, `apply`, and `also` ->
  #   [Reference](https://kotlinlang.org/docs/reference/scope-functions.html)
  ComplexMethod:
    active: true
    threshold: 12
    ignoreSingleWhenExpression: false
    ignoreSimpleWhenEntries: true
    ignoreNestingFunctions: true
    # list of function names which add complexity
    nestingFunctions: [run, let, apply, with, also, use, forEach, isNotNull, ifNull]
  # do not report labeled expressions, like `return@something`
  LabeledExpression:
    active: false
    ignoredLabels: []
  LargeClass:
    active: true
    excludes: ['**/test/**', '**/**Test/**']
    threshold: 500
  LongMethod:
    active: true
    excludes: [ '**/test/**', '**/**Test/**' ]
    threshold: 60
    ignoreAnnotated: [ 'Composable' ]
  LongParameterList:
    active: true
    ignoreAnnotated: [ 'Composable', 'Module' ]
    functionThreshold: 7
    constructorThreshold: 99
    ignoreDefaultParameters: true
    ignoreDataClasses: true
  # reports methods which are overloaded often
  MethodOverloading:
    active: true
    threshold: 6
  NamedArguments:
    active: true
    threshold: 5
  NestedBlockDepth:
    active: true
    threshold: 5
  ReplaceSafeCallChainWithRun:
    active: false
  StringLiteralDuplication:
    active: false
    threshold: 2
    # do not ignore strings in annotations
    ignoreAnnotation: false
    excludeStringsWithLessThan5Characters: false
    ignoreStringsRegex: '$^'
  TooManyFunctions:
    active: true
    excludes: ['**/test/**', '**/**Test/**', '**/DataSource.kt']
    ignoreAnnotated: [ 'Module' ]
    thresholdInFiles: 31
    thresholdInClasses: 26
    thresholdInInterfaces: 21
    thresholdInObjects: 21
    thresholdInEnums: 5
    ignoreDeprecated: true
    ignorePrivate: false
    ignoreOverridden: false

coroutines:
  active: true
  GlobalCoroutineUsage:
    active: true
  InjectDispatcher:
    active: true
    dispatcherNames: ['IO', 'Default', 'Unconfined']
  RedundantSuspendModifier:
    active: true
  SleepInsteadOfDelay:
    active: true
  SuspendFunWithCoroutineScopeReceiver:
    active: true
  SuspendFunWithFlowReturnType:
    active: true

# report empty block ( class, function, catch, etc )
empty-blocks:
  active: true
  EmptyCatchBlock:
    active: true
    allowedExceptionNameRegex: '_|(ignore|expected).*'
  EmptyClassBlock:
    active: true
  EmptyDefaultConstructor:
    active: true
  EmptyDoWhileBlock:
    active: true
  EmptyElseBlock:
    active: true
  EmptyFinallyBlock:
    active: true
  EmptyForBlock:
    active: true
  EmptyFunctionBlock:
    active: true
    ignoreOverridden: true
  EmptyIfBlock:
    active: true
  EmptyInitBlock:
    active: true
  EmptyKtFile:
    active: true
  EmptySecondaryConstructor:
    active: true
  EmptyTryBlock:
    active: true
  EmptyWhenBlock:
    active: true
  EmptyWhileBlock:
    active: true

exceptions:
  active: true
  # report functions which should never throw an exception
  ExceptionRaisedInUnexpectedLocation:
    active: true
    methodNames: [toString, hashCode, equals, finalize]
  # reports catch blocks which check for the type of an exception via is checks or casts
  InstanceOfCheckForException:
    active: false
  # reports all exceptions of the type NotImplementedError and `TO\\DO(..)`
  NotImplementedDeclaration:
    active: true
  ObjectExtendsThrowable:
    active: true
  PrintStackTrace:
    active: true
  RethrowCaughtException:
    active: true
  ReturnFromFinally:
    active: false
    # ignoreLabeled: false
  SwallowedException:
    active: false
    # ignoredExceptionTypes:
    #   - InterruptedException
    #   - NumberFormatException
    #   - ParseException
    #   - MalformedURLException
    # allowedExceptionNameRegex: '_|(ignore|expected).*'
  ThrowingExceptionFromFinally:
    active: true
  ThrowingExceptionInMain:
    active: true
  ThrowingExceptionsWithoutMessageOrCause:
    active: true
    excludes: ['**/test/**', '**/**Test/**']
    exceptions:
      - IllegalArgumentException
      - IllegalStateException
      - IOException
  ThrowingNewInstanceOfSameException:
    active: true
  TooGenericExceptionCaught:
    active: true
    excludes: ['**/test/**', '**/**Test/**']
    exceptionNames:
      - ArrayIndexOutOfBoundsException
      - Error
      - Exception
      - IllegalMonitorStateException
      - NullPointerException
      - IndexOutOfBoundsException
      - RuntimeException
      - Throwable
    allowedExceptionNameRegex: "^(_|(ignore|expected).*)"
  TooGenericExceptionThrown:
    active: true
    exceptionNames:
      - Error
      - Exception
      - Throwable
      - RuntimeException

formatting:
  active: true
  android: true
  autoCorrect: true
  AnnotationOnSeparateLine:
    active: false
    # autoCorrect: true
  AnnotationSpacing:
    active: false
    # autoCorrect: true
  ArgumentListWrapping:
    active: false
  BlockCommentInitialStarAlignment:
    active: true
    autoCorrect: true
  ChainWrapping:
    active: true
    autoCorrect: true
  CommentSpacing:
    active: true
    autoCorrect: true
  CommentWrapping:
    active: true
    autoCorrect: true
  DiscouragedCommentLocation:
    active: false
  EnumEntryNameCase:
    active: false
    # autoCorrect: true
  Filename:
    active: false
  FinalNewline:
    active: true
    autoCorrect: true
    insertFinalNewLine: true
  FunctionTypeReferenceSpacing:
    active: true
    autoCorrect: true
  FunctionReturnTypeSpacing:
    active: true
    autoCorrect: true
  FunctionSignature:
    active: true
    autoCorrect: true
    forceMultilineWhenParameterCountGreaterOrEqualThan: 3
    functionBodyExpressionWrapping: 'default'
    maxLineLength: 120
    indentSize: 4
  FunctionStartOfBodySpacing:
    active: false
    autoCorrect: false
  FunKeywordSpacing:
    active: true
    autoCorrect: true
  ImportOrdering:
    active: false
    # autoCorrect: true
    # layout: 'idea'
  Indentation:
    active: true
    autoCorrect: true
    indentSize: 4
  KdocWrapping:
    active: true
    autoCorrect: true
    indentSize: 4
  # MaxLineLength is already enabled
  MaximumLineLength:
    active: false
    # maxLineLength: 120
  ModifierListSpacing:
    active: true
    autoCorrect: true
  # ModifierOrder is already enabled
  ModifierOrdering:
    active: false
    # autoCorrect: true
  MultiLineIfElse:
    active: false
    # autoCorrect: false
  NoBlankLineBeforeRbrace:
    active: false
    # autoCorrect: true
  NoConsecutiveBlankLines:
    active: false
    # autoCorrect: true
  NoEmptyClassBody:
    active: false
    # autoCorrect: true
  NoEmptyFirstLineInMethodBlock:
    active: false
    # autoCorrect: true
  NoLineBreakAfterElse:
    active: false
    # autoCorrect: true
  NoLineBreakBeforeAssignment:
    active: false
    # autoCorrect: true
  NoMultipleSpaces:
    active: true
    autoCorrect: true
  NoSemicolons:
    active: true
    autoCorrect: true
  NoTrailingSpaces:
    active: false
    # autoCorrect: true
  NoUnitReturn:
    active: true
    autoCorrect: true
  # UnusedImports already enabled
  NoUnusedImports:
    active: false
    # autoCorrect: true
  # WildcardImports already enabled
  NoWildcardImports:
    active: false
  NullableTypeSpacing:
    active: true
    autoCorrect: true
  PackageName:
    active: true
    autoCorrect: true
  ParameterListSpacing:
    active: true
    autoCorrect: true
  ParameterListWrapping:
    active: true
    autoCorrect: true
    indentSize: 4
  SpacingAroundAngleBrackets:
    active: true
    autoCorrect: true
  SpacingAroundColon:
    active: true
    autoCorrect: true
  SpacingAroundComma:
    active: true
    autoCorrect: true
  SpacingAroundCurly:
    active: true
    autoCorrect: true
  SpacingAroundDot:
    active: true
    autoCorrect: true
  SpacingAroundDoubleColon:
    active: false
    autoCorrect: true
  SpacingAroundKeyword:
    active: true
    autoCorrect: true
  SpacingAroundOperators:
    active: true
    autoCorrect: true
  SpacingAroundParens:
    active: true
    autoCorrect: true
  SpacingAroundRangeOperator:
    active: false
    # autoCorrect: true
  SpacingAroundUnaryOperator:
    active: true
    autoCorrect: true
  # example compliant     `@file:JvmName(...)`
  # example non compliant `@file: JvmName(...)`
  SpacingBetweenDeclarationsWithAnnotations:
    active: true
    autoCorrect: true
  SpacingBetweenDeclarationsWithComments:
    active: false
    # autoCorrect: true
  SpacingBetweenFunctionNameAndOpeningParenthesis:
    active: true
    autoCorrect: true
  StringTemplate:
    active: true
    autoCorrect: true
  TrailingCommaOnCallSite:
    active: true
    autoCorrect: true
    useTrailingCommaOnCallSite: false
  TrailingCommaOnDeclarationSite:
    active: true
    autoCorrect: true
    useTrailingCommaOnDeclarationSite: false
  TypeArgumentListSpacing:
    active: true
    autoCorrect: true
  TypeParameterListSpacing:
    active: true
    autoCorrect: true
  UnnecessaryParenthesesBeforeTrailingLambda:
    active: true
    autoCorrect: true
  Wrapping:
    active: true
    autoCorrect: true
    indentSize: 4

naming:
  active: true
  BooleanPropertyNaming:
    active: true
    allowedPattern: '^(is|has|are|should)'
  ClassNaming:
    active: true
    excludes: ['**/test/**', '**/**Test/**']
    classPattern: '[A-Z$][a-zA-Z0-9$]*'
  ConstructorParameterNaming:
    active: true
    parameterPattern: '[a-z][A-Za-z0-9]*'
    privateParameterPattern: '[a-z][A-Za-z0-9]*'
    excludeClassPattern: '$^'
    ignoreOverridden: true
  EnumNaming:
    active: true
    enumEntryPattern: '[A-Z][_a-zA-Z0-9]*'
  ForbiddenClassName:
    active: false
    # forbiddenName: []
  FunctionMaxLength:
    excludes: ['**/test/**', '**/**Test/**']
    active: true
    maximumFunctionNameLength: 40
  FunctionMinLength:
    active: false
    # minimumFunctionNameLength: 3
  FunctionNaming:
    active: true
    excludes: [ '**/test/**', '**/**Test/**' ]
    functionPattern: '([a-zA-Z][a-zA-Z0-9]*)|(`.*`)'
    excludeClassPattern: '$^'
    ignoreOverridden: true
    ignoreAnnotated: ['Composable']
  FunctionParameterNaming:
    active: true
    parameterPattern: '[a-z][A-Za-z0-9]*'
    excludeClassPattern: '$^'
    ignoreOverridden: true
  InvalidPackageDeclaration:
    active: false
    rootPackage: ''
  LambdaParameterNaming:
    active: false
    # parameterPattern: '[a-z][A-Za-z0-9]*|_'
  MatchingDeclarationName:
    active: false
    # mustBeFirst: true
  MemberNameEqualsClassName:
    active: true
    ignoreOverridden: true
  NoNameShadowing:
    active: false
  NonBooleanPropertyPrefixedWithIs:
    active: true
  ObjectPropertyNaming:
    active: true
    constantPattern: '[A-Za-z][_A-Za-z0-9]*'
    propertyPattern: '[A-Za-z][_A-Za-z0-9]*'
    privatePropertyPattern: '(_)?[A-Za-z][_A-Za-z0-9]*'
  PackageNaming:
    active: true
    excludes: ['**/gradle/**']
    packagePattern: '[a-z]+(\.[a-z][A-Za-z0-9]*)*'
  TopLevelPropertyNaming:
    active: true
    constantPattern: '[A-Z][_A-Za-z0-9]*'
    propertyPattern: '[A-Za-z][_A-Za-z0-9]*'
    privatePropertyPattern: '_?[A-Za-z][_A-Za-z0-9]*'
  VariableMaxLength:
    active: true
    maximumVariableNameLength: 40
  VariableMinLength:
    active: false
    # minimumVariableNameLength: 1
  VariableNaming:
    active: true
    variablePattern: '[a-zA-Z][A-Za-z0-9]*'
    privateVariablePattern: '(_)?[a-z][A-Za-z0-9]*'
    excludeClassPattern: '$^'
    ignoreOverridden: true

performance:
  active: true
  ArrayPrimitive:
    active: true
  CouldBeSequence:
    active: true
    threshold: 4
  ForEachOnRange:
    active: true
    excludes: ['**/test/**', '**/**Test/**']
  SpreadOperator:
    active: false
  UnnecessaryPartOfBinaryExpression:
    active: false
  UnnecessaryTemporaryInstantiation:
    active: true

potential-bugs:
  active: true
  AvoidReferentialEquality:
    active: true
  CastToNullableType:
    active: true
  Deprecation:
    active: true
  DoubleMutabilityForCollection:
    active: true
  DuplicateCaseInWhenExpression:
    active: true
  ElseCaseInsteadOfExhaustiveWhen:
    active: true
  EqualsAlwaysReturnsTrueOrFalse:
    active: true
  EqualsWithHashCodeExist:
    active: true
  ExplicitGarbageCollectionCall:
    active: true
  HasPlatformType:
    active: true
  # This rule warns on instances where a function, annotated with either `@CheckReturnValue` or `@CheckResult`,
  # returns a value but that value is not used in any way. The Kotlin compiler gives no warning for this scenario
  # normally so that's the rationale behind this rule.
  #
  # fun returnsValue() = 42
  # fun returnsNoValue() {}
  #
  # <noncompliant>
  #     returnsValue()
  # </noncompliant>
  #
  # <compliant>
  #     if (42 == returnsValue()) {}
  #     val x = returnsValue()
  # </compliant>
  #
  # @configuration restrictToAnnotatedMethods - if the rule should check only annotated methods. (default: `true`)
  # @configuration returnValueAnnotations - List of glob patterns to be used as inspection annotation (default: `['*.CheckReturnValue', '*.CheckResult']`)
  IgnoredReturnValue:
    active: true
    restrictToAnnotatedMethods: true
    returnValueAnnotations: ['*.CheckReturnValue', '*.CheckResult']
  ImplicitDefaultLocale:
    active: true
  # Functions that return `Unit` should have a block body, rather an expression one
  # Example compliant
  # ```
  # fun printHelloWorld() {
  #   println("hello world")
  # }
  # ```
  # Example not compliant
  # `fun printHelloWorld() = println("hello world")`
  #
  # allowExplicitReturnType says that the non compiant example would be compliant when the return type is explicit
  ImplicitUnitReturnType:
    active: true
    allowExplicitReturnType: true
  InvalidRange:
    active: true
  IteratorHasNextCallsNextMethod:
    active: true
  IteratorNotThrowingNoSuchElementException:
    active: true
  LateinitUsage:
    active: false
    # excludeAnnotatedProperties: []
    # ignoreOnClassesPattern: ''
  MapGetWithNotNullAssertionOperator:
    active: true
  MissingWhenCase:
    active: true
    allowElseExpression: false
  NullableToStringCall:
    active: true
  NullCheckOnMutableProperty:
    active: false
  RedundantElseInWhen:
    active: true
  UnconditionalJumpStatementInLoop:
    active: false
  UnnecessaryNotNullCheck:
    active: true
  UnnecessaryNotNullOperator:
    active: true
  UnnecessarySafeCall:
    active: true
  UnreachableCode:
    active: true
  UnsafeCallOnNullableType:
    active: true
  UnreachableCatchBlock:
    active: true
  UnsafeCast:
    active: false
  UselessPostfixExpression:
    active: false
  WrongEqualsTypeParameter:
    active: true

style:
  active: true
  AlsoCouldBeApply:
    active: true
  # This rule ensures class contents are ordered as follows as recommended by the Kotlin Coding Conventions
  #  ( see https://kotlinlang.org/docs/reference/coding-conventions.html#class-layout ):
  #  Mandatory order
  #  * Property declarations and initializer blocks
  #  * Secondary constructors
  #  * Method declarations
  #  * Companion object
  ClassOrdering:
    active: true
  CollapsibleIfStatements:
    active: false
  CascadingCallWrapping:
    active: true
    includeElvis: true
  DataClassContainsFunctions:
    active: false
    # conversionFunctionPrefix: 'to'
  DataClassShouldBeImmutable:
    active: true
  EqualsNullCall:
    active: true
  EqualsOnSignatureLine:
    active: true
  ExplicitCollectionElementAccessMethod:
    active: true
  ExplicitItLambdaParameter:
    active: false
  ExpressionBodySyntax:
    active: true
    includeLineWrapping: false
  ForbiddenComment:
    active: true
    values: ['TODO', 'FIXME', 'STOPSHIP']
    allowedPatterns: ''
  ForbiddenImport:
    active: true
    imports: ['junit.framework.TestCase.*', 'org.junit.Assert.*', 'org.junit.framework.Assert.*', 'org.junit.Test']
    forbiddenPatterns: ''
  ForbiddenMethodCall:
    active: true
    methods: ['app.cash.sqldelight.Transacter.transaction', 'app.cash.sqldelight.Transacter.transactionWithResult']
  ForbiddenPublicDataClass:
    active: false
    # excludes: ['**']
    # ignorePackages: ['*.internal, *.internal.*']
  ForbiddenVoid:
    active: true
    ignoreOverridden: false
    ignoreUsageInGenerics: false
  ForbiddenSuppress:
    active: true
    rules: []
  FunctionOnlyReturningConstant:
    active: true
    ignoreOverridableFunction: true
    excludedFunctions: 'describeContents'
    excludeAnnotatedFunction: "dagger.Provides"
  LibraryCodeMustSpecifyReturnType:
    active: false
    # excludes: ['**']
  LibraryEntitiesShouldNotBePublic:
    active: false
    # excludes: ['**']
  LoopWithTooManyJumpStatements:
    active: true
    maxJumpCount: 2
  MagicNumber:
    active: false
    # excludes: ['**/test/**', '**/**Test/**']
    # ignoreNumbers: ['-1', '0', '1', '2']
    # ignoreHashCodeFunction: true
    # ignorePropertyDeclaration: true
    # ignoreLocalVariableDeclaration: true
    # ignoreConstantDeclaration: true
    # ignoreCompanionObjectPropertyDeclaration: true
    # ignoreAnnotation: false
    # ignoreNamedArgument: true
    # ignoreEnums: true
    # ignoreRanges: false
  MandatoryBracesIfStatements:
    active: false
  MandatoryBracesLoops:
    active: true
  MaxChainedCallsOnSameLine:
    active: false
    maxChainedCalls: 3
  MaxLineLength:
    active: true
    maxLineLength: 120
    excludePackageStatements: true
    excludeImportStatements: true
    excludeCommentStatements: false
  MayBeConst:
    active: true
  ModifierOrder:
    active: true
  MultilineLambdaItParameter:
    active: false
  MultilineRawStringIndentation:
    active: true
    indentSize: 4
  NestedClassesVisibility:
    active: true
  NewLineAtEndOfFile:
    active: true
  NoTabs:
    active: false
  NullableBooleanCheck:
    active: false
  ObjectLiteralToLambda:
    active: false
  OptionalAbstractKeyword:
    active: true
  OptionalUnit:
    active: true
  OptionalWhenBraces:
    active: false
  PreferToOverPairSyntax:
    active: false
  ProtectedMemberInFinalClass:
    active: true
  RedundantExplicitType:
    active: false
  # Redundant maps add complexity to the code and accomplish nothing. They should be removed or replaced with the proper operator.
  #
  #  Non compliant:
  #  fun foo(list: List<Int>): List<Int> {
  #      return list
  #          .filter { it > 5 }
  #          .map { it }
  #  }
  #
  #  fun bar(list: List<Int>): List<Int> {
  #      return list
  #          .filter { it > 5 }
  #          .map {
  #              doSomething(it)
  #              it
  #          }
  #  }
  #
  #  fun baz(set: Set<Int>): List<Int> {
  #      return set.map { it }
  #  }
  #
  #  Compliant:
  # fun foo(list: List<Int>): List<Int> {
  #      return list
  #          .filter { it > 5 }
  #  }
  #
  #  fun bar(list: List<Int>): List<Int> {
  #      return list
  #          .filter { it > 5 }
  #          .onEach {
  #              doSomething(it)
  #          }
  #  }
  #
  #  fun baz(set: Set<Int>): List<Int> {
  #      return set.toList()
  #  }
  RedundantHigherOrderMapUsage:
    active: true
  RedundantVisibilityModifierRule:
    active: false
  ReturnCount:
    active: true
    max: 3
    excludedFunctions: ''
    excludeLabeled: false
    excludeReturnFromLambda: true
    excludeGuardClauses: true
  SafeCast:
    active: true
  SerialVersionUIDInSerializableClass:
    active: false
  SpacingBetweenPackageAndImports:
    active: true
  ThrowsCount:
    active: true
    max: 3
  TrailingWhitespace:
    active: false
  TrimMultilineRawString:
    active: true
  UnderscoresInNumericLiterals:
    active: true
    acceptableDecimalLength: 5
  UnnecessaryAbstractClass:
    active: true
    excludes: ['**/gradle/**']
    excludeAnnotatedClasses: []
  UnnecessaryAnnotationUseSiteTarget:
    active: false
  UnnecessaryApply:
    active: true
  UnnecessaryBackticks:
    active: true
  UnnecessaryInheritance:
    active: true
  UnnecessaryInnerClass:
    active: true
  UnnecessaryLet:
    active: true
  UnnecessaryParentheses:
    active: true
  UntilInsteadOfRangeTo:
    active: true
  UnusedImports:
    active: true
  UnusedPrivateClass:
    active: true
  UnusedPrivateMember:
    active: true
    ignoreAnnotated: ['Preview', '*Previews', '*Previews.*']
    allowedNames: "(_|ignored|expected|serialVersionUID)"
  UseArrayLiteralsInAnnotations:
    active: false
  # flag `check` calls for not-null check that can be replaced with a `checkNotNull` call.
  UseCheckNotNull:
    active: true
  UseCheckOrError:
    active: false
  UseDataClass:
    active: false
    # excludeAnnotatedClasses: []
    # allowVars: false
  # Example compliant     `emptyList<String>()`
  # Example not compliant `listOf<String>()`
  UseEmptyCounterpart:
    active: true
  # detects isEmpty or isBlank calls to assign a default value. They can be replaced with ifEmpty or ifBlank calls.
  #
  #  Non Compliant:
  #   fun test(list: List<Int>, s: String) {
  #       val a = if (list.isEmpty()) listOf(1) else list
  #       val b = if (list.isNotEmpty()) list else listOf(2)
  #       val c = if (s.isBlank()) "foo" else s
  #       val d = if (s.isNotBlank()) s else "bar"
  #  }
  #
  #  Compliant:
  #  fun test(list: List<Int>, s: String) {
  #      val a = list.ifEmpty { listOf(1) }
  #      val b = list.ifEmpty { listOf(2) }
  #      val c = s.ifBlank { "foo" }
  #      val d = s.ifBlank { "bar" }
  #  }
  UseIfEmptyOrIfBlank:
    active: true
  UseIfInsteadOfWhen:
    active: false
  UseIsNullOrEmpty:
    active: true
  UseOrEmpty:
    active: true
  UseRequire:
    active: true
  # flag require calls for not-null check that can be replaced with a requireNotNull call.
  UseRequireNotNull:
    active: true
  UseSumOfInsteadOfFlatMapSize:
    active: true
  UselessCallOnNotNull:
    active: true
  UtilityClassWithPublicConstructor:
    active: true
  VarCouldBeVal:
    active: true
  WildcardImport:
    active: true
    excludeImports: []

TwitterCompose:
  CompositionLocalAllowlist:
    active: true
    # You can optionally define a list of CompositionLocals that are allowed here
    # allowedCompositionLocals: LocalSomething,LocalSomethingElse
  CompositionLocalNaming:
    active: true
  ContentEmitterReturningValues:
    active: true
    # You can optionally add your own composables here
    # contentEmitters: MyComposable,MyOtherComposable
  # https://twitter.github.io/compose-rules/rules/#avoid-modifier-extension-factory-functions
  ModifierComposable:
    active: true
  ModifierMissing:
    active: false
  ModifierReused:
    active: true
  ModifierWithoutDefault:
    active: true
  MultipleEmitters:
    active: true
    # You can optionally add your own composables here
    # contentEmitters: MyComposable,MyOtherComposable
  MutableParams:
    active: true
  # https://twitter.github.io/compose-rules/rules/#naming-composable-functions-properly
  ComposableNaming:
    active: true
    # You can optionally disable the checks in this rule for regex matches against the composable name (e.g. molecule presenters)
    # allowedComposableFunctionNames: .*Presenter,.*MoleculePresenter
  ComposableParamOrder:
    active: true
  PreviewNaming:
    active: true
  PreviewPublic:
    active: true
    # You can optionally disable that only previews with @PreviewParameter are flagged
    # previewPublicOnlyIfParams: false
  RememberMissing:
    active: true
  UnstableCollections:
    active: true
  # https://twitter.github.io/compose-rules/rules/#hoist-all-the-things
  ViewModelForwarding:
    active: true
  # https://twitter.github.io/compose-rules/rules/#viewmodels
  ViewModelInjection:
    active: true
